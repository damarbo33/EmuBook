// Class automatically generated by Dev-C++ New Class wizard

#ifndef TMENUPRINCIPAL_H
#define TMENUPRINCIPAL_H

#define MAXPATH 300

#include "menu.h" // inheriting class's header file
#include <string>
#include <sys\stat.h>
#include <stdio.h>
#include <dirent.h>
#include <sys\types.h>
#include <string.h>
#include "traza.h"
#include "ttecladoPantalla.h"
#include "tdiccionario.h"
#include "sound.h"

//#include <direct.h> // for getcwd

#include <SDL\SDL.h>
#include "ttext.h"


/*
 * Clase que contiene los campos del menu principal
 */
class TMenuPrincipal : public TMenu
{
public:
    // class constructor
    TMenuPrincipal(SDL_Surface* screen);
    // class destructor
    ~TMenuPrincipal();

    char * comprobarDirPadre(char *);
    void CrearCampos();
    void MostrarMenuPrincipal();
    int ejecutarMenu(Uint8 sym);
    // No description
//		void MostrarMenu(int numMenu);
    // No description
    void explorar(char *filename);
    void opciones(void);
    void irA(void);
    // No description

    TText *Lector;
    TText *LectorDiccionario;
//		void setRutaSeleccion(char * x); // sets the value of rutaSeleccion
//		char * getRutaSeleccion(); // returns the value of rutaSeleccion
//        void getDirActual(char *buffer);
//        void setDirActual(char *buffer);
    void abrirFichero(char * x);
    void AccionesMenuAbrir(void);
    void AccionesMenuOpciones(Uint8 sym);
    void AccionesMenuFuentes(void);
    void AccionesMenuTamFuentes(void);
    void AccionesCampoVolver(void);
    void AccionesBarra(int entrada);
    void MostrarFuentes(void);
    void MostrarFicherosRecientes(void);
    void MostrarEstadisticas(void);
    int modificaCampo(char *campo,Uint8 sym);
    void AccionesMenuIrA(Uint8 sym);
    void cargaConfiguracion(TText *lectorTexto);
    void guardaConfiguracion(void);
    void AccionesMenuRecientes(void);
    void AccionesBorradoRecientes(void);
    TConfig *fichConf;
    void SetArchivoAbierto(bool x, char *nomFichero);
    bool GetArchivoAbierto(); // returns the value of archivoAbierto
    void addreturn (char *buffer);
    void crearColores(void);
    void AccionesEstiloFuentes(void);
    char ficheroSeleccionado[MAXPATH];
    int procesarJoystick (SDL_Event evento);
    int procesarTeclas (SDLKey sym);
    int getKeyDelay();
    void setKeyDelay(int iDelay);
    unsigned int getInitKeyDelay();
    void setInitKeyDelay(unsigned int iDelay);
    void refrescarTexto();



//    char *rutaSeleccion;
private:
    void AccionesJustificadoFuentes(int entrada);
    void AccionesQuizasQuisoBuscar(void);
    void AccionesTeclasDiccionario(void);
    void menuQuizasQuisoBuscar(TClist *);
    void AccionesSonido(int);

    void MenuBuscar();
    TSound *sonido;

    struct t_colores
    {
        char color[15];
    }colores[10];

    traza *miTraza;
    int dato;
    /**
     * Variable para recoger la ruta que se va seleccionando a
     * través del explorador de archivos
     */
    //char * rutaSeleccion;
    // Gestiona si se ha abierto ya un archivo
    bool archivoAbierto;
    bool b_diccionario;
    int key_delay;
    unsigned int key_init_delay;
    bool fuenteCambiada;
    TTecladoPantalla *tecladoPantalla;

};
/* GP2X button mapping */
/*
enum MAP_KEY
{
	VK_UP         , // 0
	VK_UP_LEFT    , // 1
	VK_LEFT       , // 2
	VK_DOWN_LEFT  , // 3
	VK_DOWN       , // 4
	VK_DOWN_RIGHT , // 5
	VK_RIGHT      , // 6
	VK_UP_RIGHT   , // 7
	VK_START      , // 8
	VK_SELECT     , // 9
	VK_FL         , // 10
	VK_FR         , // 11
	VK_FA         , // 12
	VK_FB         , // 13
	VK_FX         , // 14
	VK_FY         , // 15
	VK_VOL_UP     , // 16
	VK_VOL_DOWN   , // 17
	VK_TAT          // 18
};
*/



enum MAP_KEY
{
    VK_UP         , // 0
    VK_UP_LEFT    , // 1
    VK_LEFT       , // 2
    VK_DOWN_LEFT  , // 3
    VK_DOWN       , // 4
    VK_DOWN_RIGHT , // 5
    VK_RIGHT      , // 6
    VK_UP_RIGHT   , // 7
    VK_START      , // 8
    VK_SELECT     , // 9
    VK_FR         , // 10
    VK_FL         , // 11
    VK_FA         , // 12
    VK_FB         , // 13
    VK_FY         , // 14
    VK_FX         , // 15
    VK_VOL_UP     , // 16
    VK_VOL_DOWN   , // 17
    VK_TAT          // 18
};



#endif // TMENUPRINCIPAL_H
