// Class automatically generated by Dev-C++ New Class wizard

#include "menuData.h" // class's header file

// class constructor
TMenuData::TMenuData()
{
    this->numMenus = 0;
}

TMenuData::~TMenuData()
{
}

/**
*
* Metodo que sirve para añadir menus
* varNombre: Descripción del elemento del menu
*
**/

void TMenuData::AddMenu(char *varNombre)
{

    if (this->numMenus == 0)
        this->menus = (struct TMenuData::my_struct_menu *) malloc(sizeof(struct TMenuData::my_struct_menu));
    else
        this->menus = (struct TMenuData::my_struct_menu *) realloc(this->menus, (this->numMenus+1)*sizeof(struct TMenuData::my_struct_menu));

    if (strlen(varNombre)<20)
        strcpy(this->menus[this->numMenus].nombreMenu,varNombre);
    else
        strcpy(this->menus[this->numMenus].nombreMenu,"-");

    this->menus[this->numMenus].numCampos = 0;
    this->menus[this->numMenus].tieneProps = false;
    this->numMenus++;


}

/**
*
* Metodo que sirve para añadir campos a los menus
* varNombre: Descripción del elemento del menu
* props: propiedades del elemento del menu. Por ahora solo se compara para obtener la imagen a mostrar
* menusD->AddCampoMenu("3","abrir","s8");
* "abrir": texto a mostrar en la opcion del menu
* "s8": muestra la imagen 8 cargada en el imagen.cpp
*
**/
void TMenuData::AddCampoMenu(int varMenu, char *varNombre, char *props)
{
    if (varMenu < this->numMenus)
    {
        if (this->menus[varMenu].numCampos == 0)
        {
            this->menus[varMenu].campo = (struct TMenuData::TMenuData::my_struct_campo *) malloc(sizeof(struct TMenuData::TMenuData::my_struct_campo));
        }
        else
        {
            this->menus[varMenu].campo = (struct TMenuData::TMenuData::my_struct_campo *) realloc(this->menus[varMenu].campo,(this->menus[varMenu].numCampos+1)* sizeof(struct TMenuData::TMenuData::my_struct_campo));
        }

        strcpy(this->menus[varMenu].campo[this->menus[varMenu].numCampos].nombre,varNombre);
        //this->menus[varMenu].campo[this->menus[varMenu].numCampos].props == NULL;
        //this->menus[varMenu].tieneProps = false;
        this->menus[varMenu].numCampos++;
        AddPropMenu(varMenu,this->menus[varMenu].numCampos-1, props);
    }
}

void TMenuData::clearCamposMenu(int varMenu)
{
    this->menus[varMenu].numCampos = 0;
}

/**
*
* Metodo que sirve para modificar el texto de cada elemento de los menus y de sus propiedades
* - Este metodo se usa para añadir elementos al menu actual. Para añadir elementos a
* menus especificos, AddCampoMenu(int varMenu, char *varNombre, char *props)
*
* varNombre: Descripción del elemento del menu
* props: propiedades del elemento del menu. Por ahora solo se compara para obtener la imagen a mostrar
* menusD->AddCampoMenu("abrir","s8");
* "abrir": texto a mostrar en la opcion del menu
* "s8": muestra la imagen 8 cargada en el imagen.cpp
*
**/
void TMenuData::ModCampoMenu(int varMenu, int varCampo, char *varNombre, char *props)
{
    strcpy(this->menus[varMenu].campo[varCampo].nombre,varNombre);
    AddPropMenu(varMenu,varCampo, props);
}


/**
*
* Metodo que sirve para añadir campos a los menus
* - Este metodo se usa para añadir elementos al menu actual. Para añadir elementos a
* menus especificos, AddCampoMenu(int varMenu, char *varNombre, char *props)
*
* varNombre: Descripción del elemento del menu
* props: propiedades del elemento del menu. Por ahora solo se compara para obtener la imagen a mostrar
* menusD->AddCampoMenu("abrir","s8");
* "abrir": texto a mostrar en la opcion del menu
* "s8": muestra la imagen 8 cargada en el imagen.cpp
*
**/
void TMenuData::AddCampoMenu(char *varNombre, char *props)
{
    if (this->numMenus > 0)
    {
        int var_posMenu = this->numMenus -1;
        if (this->menus[var_posMenu].numCampos == 0)
        {
            this->menus[var_posMenu].campo = (struct TMenuData::TMenuData::my_struct_campo *) malloc(sizeof(struct TMenuData::TMenuData::my_struct_campo));
        }
        else
        {
            this->menus[var_posMenu].campo = (struct TMenuData::TMenuData::my_struct_campo *) realloc(this->menus[var_posMenu].campo,(this->menus[var_posMenu].numCampos+1)* sizeof(struct TMenuData::TMenuData::my_struct_campo));
        }
        strcpy(this->menus[var_posMenu].campo[this->menus[var_posMenu].numCampos].nombre,varNombre);
        //this->menus[var_posMenu].campo[this->menus[var_posMenu].numCampos].props == NULL;
        this->menus[var_posMenu].numCampos++;
        AddPropMenu(var_posMenu,this->menus[var_posMenu].numCampos-1, props);
    }
}



void TMenuData::AddPropMenu(int varMenu, int varCampo, char *varNombre)
{
    if (varMenu < this->numMenus && varNombre != NULL)
    {
        if (varCampo < this->menus[varMenu].numCampos && strcmp("",varNombre) != 0)
        {
            strcpy(this->menus[varMenu].campo[varCampo].props,varNombre);
            this->menus[varMenu].tieneProps = true;
        }
    }
}
