// Class automatically generated by Dev-C++ New Class wizard

#include "ttecladoPantalla.h" // class's header file

// class constructor
TTecladoPantalla::TTecladoPantalla(SDL_Surface *screen) : TPantalla(screen)
{
	// insert your code here
	fichConf = new TConfig();

    if (!fichConf->procesar_fichero("lector.ini"))
    {
        //Damos valores por defecto cuando fallamos al abrir el fichero
        fichConf->setClave("font_type","Vera.ttf");
    }

    fichConf->obtenClaves();
    setTamFuente(16);

    char TipoFuente[100];
    strcpy(TipoFuente,fichConf->getClave("font_type"));

    if (TipoFuente != NULL)
    {
        char directorio[MAXPATH];
        strcpy(directorio,this->rutaSeleccion);

#ifdef GP2X
        strcat(directorio,"/fonts/");
#endif

#ifdef WIN32
        strcat(directorio,"\\fonts\\");
#endif

        strcat(directorio,TipoFuente);

        this->setColor(clBlanco);
        this->setFondo(clNegro);

        if (!this->LoadFont(directorio,this->getTamFuente()))
        {
            this->LoadFont(this->tamFuente);
        }
        else
        {
            this->LoadFont(directorio,this->tamFuente);
        }
    }

	this->crearArrayTamanyos(this->font,tamFuente);
	numLetras = 15;
	justificar = false;
    this->key_delay = 100;
    this->key_init_delay = 700;
    this->miImagen = new TImagen(screen);
    this->miImagen->cargarIconos();

    fichLang = new TConfig();
    if (fichLang->procesar_fichero("lang.ini"))
    {
        fichLang->obtenClaves();
    }
    memset(textoBusqueda,' ',numLetras);
    textoBusqueda [15]= '\0';
}

// class destructor
TTecladoPantalla::~TTecladoPantalla()
{
    printf("TTecladoPantalla::TTecladoPantalla: Destructor\n");
    delete fichConf;
    delete miImagen;
    delete fichLang;
}

char * TTecladoPantalla::getTextoBusqueda()
{
    return textoBusqueda;
}

//bool TTecladoPantalla::gestionTeclado(char *textoBusqueda)
bool TTecladoPantalla::gestionTeclado()
{
   	char *arrayLetras = {"abcdefghijklmnñopqrstuvwxyz0123456789 "};
   	int tamArrayletras = strlen(arrayLetras);
    int posArrayLetras = -1;
    bool salir = false;
    int posTriangulo = 0;
    //char textoBusqueda[numLetras];
    //memset(textoBusqueda,' ',sizeof(textoBusqueda)/sizeof(char));
    bool editarPalabra = false;
    int posMenuTeclado = 0;

    Clear();
    this->miImagen->fondoCirculos();
    pintarPalabraBuscar(textoBusqueda,0,0, false);

    SDL_UpdateRect(screen, 0, 0, 0, 0);

    bool pressed = false;
    bool first_press = true;
    unsigned int last_press = 0;
    int inicio = SDL_GetTicks();
    int tiempo_empleado = 0;

    while (!salir)
    {
        /* Check for events */
        SDL_Event event;
        while (SDL_PollEvent(&event) && !salir)
        {
             switch (event.type)
             {
                case SDL_KEYDOWN:
                case SDL_JOYBUTTONDOWN:
                    pressed = true;
                    last_press = SDL_GetTicks();
                    break;
                case SDL_KEYUP:
                case SDL_JOYBUTTONUP:
                    pressed = false;
                    first_press = true;
                    break;
                default: break;

             }//switch (event.type)

        }//while (SDL_PollEvent

        if (pressed)
        {
            if (last_press < (SDL_GetTicks() - this->key_init_delay) || first_press)
            {
                first_press = false;
                inicio = SDL_GetTicks();

                    if (event.key.keysym.sym == SDLK_RETURN || event.jbutton.button == GP2X_BUTTON_B)
                    {
                        pressed = false;
                        //Orden de editar el texto
                        if (editarPalabra)
                        {
                            posMenuTeclado = 2;
                            editarPalabra = false;
                        }
                        else
                        {
                            if (posMenuTeclado == 0) editarPalabra = true;
                            else editarPalabra = false;

                            //Orden de borrar el texto
                            if (posMenuTeclado == 1)
                            {
                                memset(textoBusqueda,' ',numLetras);
                                textoBusqueda[numLetras] = '\0';
                                //strcpy(textoBusqueda,"");
                                posTriangulo = 0;
                            }
                            else
                            if (posMenuTeclado == 2)
                            {
                                stringTrim(textoBusqueda);
                                if (strcmp(textoBusqueda," ") != 0)
                                {
                                    return true;
                                }
                                else
                                {
                                    memset(textoBusqueda,' ',numLetras);
                                    textoBusqueda[numLetras] = '\0';
                                }
                            }
                            else
                            if (posMenuTeclado == 3)
                            {
                                salir = true;
                            }
                        }
                        pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                    }
                    else
                    if (event.key.keysym.sym == SDLK_ESCAPE || event.jbutton.button == GP2X_BUTTON_X)
                    {
                        pressed = false;
                        if (editarPalabra == true) editarPalabra = false;
                        else salir = true;
                        pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                    }
                    else
                    if (!editarPalabra)
                    {
                        if (event.key.keysym.sym == SDLK_RIGHT || event.jbutton.button == GP2X_BUTTON_RIGHT)
                        {
                            if (posMenuTeclado < 3) posMenuTeclado++;
                        }
                        else
                        if (event.key.keysym.sym == SDLK_LEFT || event.jbutton.button == GP2X_BUTTON_LEFT)
                        {
                            if (posMenuTeclado > 0) posMenuTeclado--;
                        }

                        pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                    }
                    else
                    {

                        if (event.key.keysym.sym == SDLK_RIGHT || event.jbutton.button == GP2X_BUTTON_RIGHT)
                        {
                            if (posTriangulo < numLetras-1)
                            {
                                posTriangulo++;
                                posArrayLetras = -1;
                            }
                            pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);

                        }
                        else
                        if (event.key.keysym.sym == SDLK_LEFT || event.jbutton.button == GP2X_BUTTON_LEFT)
                        {
                            if (posTriangulo > 0)
                            {
                                posTriangulo--;
                                posArrayLetras = -1;
                            }
                            pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                        }
                        else
                        if (event.key.keysym.sym == SDLK_UP || event.jbutton.button == GP2X_BUTTON_UP)
                        {
                            if (posArrayLetras < tamArrayletras-1) posArrayLetras++;
                            else posArrayLetras = 0;
                            textoBusqueda[posTriangulo] = arrayLetras[posArrayLetras];
                            pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);

                        }
                        else
                        if (event.key.keysym.sym == SDLK_DOWN || event.jbutton.button == GP2X_BUTTON_DOWN)
                        {
                            if (posArrayLetras > 0) posArrayLetras--;
                            else posArrayLetras = tamArrayletras-1;
                            textoBusqueda[posTriangulo] = arrayLetras[posArrayLetras];
                            pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                        }
                        else if (event.key.keysym.sym == SDLK_BACKSPACE)
                        {
                            if (posTriangulo > 0) posTriangulo--;
                            textoBusqueda[posTriangulo] = ' ';
                            pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                        }
                        else if (posTriangulo < numLetras)
                        {
                         //printf("la pulsada es: %c\n",event.key.keysym.sym);
                         textoBusqueda[posTriangulo] = event.key.keysym.sym;
                         pintarPalabraBuscar(textoBusqueda,posTriangulo,posMenuTeclado, editarPalabra);
                         posTriangulo++;

                        }
                    }
            }//if (last_press
        }//if (pressed)

        tiempo_empleado = SDL_GetTicks() - inicio;
        if ( tiempo_empleado < this->key_delay)
        {
            SDL_Delay(this->key_delay - tiempo_empleado);
        }

    }//while (!salir)
    SDL_UpdateRect(screen, 0, 0, 0, 0);
    return false;
}

void TTecladoPantalla::pintarPalabraBuscar(char *palabra, int posTriangulo, int posMenuBuscar, bool editarPalabra)
{
    int in_x = 14;
    int in_y = 60;
    int separacion_x = 5;
    //int letras_palabras = strlen(palabra);
    int letras_palabras = strlen(palabra);

    char datos[2] = {' ','\0'};
    int ancholetra = devolverTamanyo ('_');
    char menu_buscar[4][15] = {"Editar","Borrar","Buscar","Volver"};

    strcpy(menu_buscar[0],fichLang->getClave("mEdit"));
    strcpy(menu_buscar[1],fichLang->getClave("mDelete"));
    strcpy(menu_buscar[2],fichLang->getClave("mSearch"));
    strcpy(menu_buscar[3],fichLang->getClave("mReturn"));


    Clear();
    this->miImagen->fondoCirculos();
    this->miImagen->pintarTitulo(fichLang->getClave("mSearch"));

    for (int i = 0; i < numLetras;i++)
    {
        drawText("_",(i+1)*in_x+separacion_x*i,in_y+2);
    }

    for (int i = 0; i < letras_palabras;i++)
    {
        datos[0]=palabra[i];
        drawText(datos,(i+1)*in_x+separacion_x*i,in_y);
    }

    int espaciado = 0; //Espaciado para saber por donde empiezan las palabras contando con las anteriores
    if (posMenuBuscar > 0)
    {
        for (int i=0; i < posMenuBuscar;i++)
        {
            espaciado += devolverTamanyoS(menu_buscar[i]);
        }
    }

    int PosX = 2 + in_x + 10 + separacion_x + espaciado + posMenuBuscar*23;
    int PosY = in_y + 5*(tamFuente + saltoLinea)/2;

    if (editarPalabra)
    {
        this->miImagen->pintarTriangulo ((posTriangulo+1)*in_x+separacion_x*posTriangulo + 3*ancholetra/4, in_y + 2 + (tamFuente + saltoLinea),10,9,true,clBlanco);
    }
    else
    {
/*        pintarCirculo(left + 3,top + posCampo*separacion + separacion/2, separacion/2,clRojo);
        pintarCirculo(left + 3 + posX, top + posCampo*separacion+separacion/2, separacion/2,clRojo);
        SDL_Rect pantalla = { left + 3,top + posCampo*separacion +1, posX, separacion-2};
*/
        //Pintamos el texto sobresaltado en color rojo ClRojo
        this->miImagen->pintarCirculo(PosX+3, PosY, (tamFuente+saltoLinea)/2,clRojo);
        this->miImagen->pintarCirculo(PosX -3+ devolverTamanyoS(menu_buscar[posMenuBuscar]), PosY, (tamFuente+saltoLinea)/2,clRojo);
        SDL_Rect pantalla = {PosX +3, in_y + 2*(tamFuente + saltoLinea)+1, devolverTamanyoS(menu_buscar[posMenuBuscar])-3, tamFuente+saltoLinea-2};
        SDL_FillRect(screen, &pantalla, SDL_MapRGB(screen->format,255,0,0));
    }


    int espacioAnterior = 0;

    const int iconos[4] = {27,28,9,3};
    for (int i=0;i<4;i++)
    {

        if (i == posMenuBuscar)
            this->setColor(clNegro);
        else
            this->setColor(clBlanco);

        drawText(menu_buscar[i],in_x+10+separacion_x + espacioAnterior+ i*23, in_y+2*(tamFuente + saltoLinea));

        this->miImagen->pintarIcono(iconos[i],in_x+11+separacion_x + espacioAnterior+ i*23,in_y+2*(tamFuente + saltoLinea));

        this->setColor(clBlanco);
        espacioAnterior += devolverTamanyoS(menu_buscar[i]);
    }

    SDL_UpdateRect(screen, 0, 0, 0, 0);
}

