// Class automatically generated by Dev-C++ New Class wizard

#ifndef PANTALLA_H
#define PANTALLA_H

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>
#include <string.h>
//#include "image.h" // class's header file
#include <SDL/SDL_ttf.h>
//#include <SDL/SDL_gfxPrimitives.h>
#include <string>
#include <sys\stat.h>
#include <dirent.h>
#include <sys\types.h>
#include "mapeos.h"

#include "tconfig.h"

#define MAXPATH 300

#ifdef GP2X
#define IS_DIR 16877
#endif

#ifdef WIN32
#define IS_DIR 16895
#endif





/*
 * No description
 */
class TPantalla
{
	public:
		// class constructor
		TPantalla(SDL_Surface *screen);
		// class destructor
		~TPantalla();

		void drawText(char* datos, int x, int y);
        void setColor(SDL_Color *object, Uint8 r,Uint8 g,Uint8 b);
   		bool LoadFont(int size);
 		bool LoadFont(char *fontName, int size);
		void setColor(int color);
		void setFondo(int color);
        void Clear();
        int getTamFuente(void);
        void setTamFuente(int dato);
        void crearArrayTamanyos(TTF_Font *font,int tamFont);
        int devolverTamanyo(unsigned char letra);
        int devolverTamanyoS(char *letra);
  		void setRutaSeleccion(char * x); // sets the value of rutaSeleccion
		char * getRutaSeleccion(); // returns the value of rutaSeleccion
        void getDirActual(char *buffer);
        void setDirActual(char *buffer);
        int contiene (char *s1, char *s2);
        int getFontColor();
        void putColor(int color, SDL_Color *c_color);
        void setJustificar(bool);
        bool getJustificar();
        bool get_file_attrib(char *filename);

        int contiene (char * , char);

        void stringTrim(char *dato);
        int maxHeight;
        int maxWidth;
        int tamFuente;
        int saltoLinea;
        TTF_Font* font;
        bool getBarra();
        void setBarra(bool dato_in);
        bool esRetorno(char dato);
        traza *objTraza;
        void remarcarPalabra(int,int,int,char *);
        void setPosMarcaPalabra(int);
        int getPosMarcaPalabra();
        void stopPosMarcaPalabra();
        void setPalabraRemarcada(char *);
        char * getPalabraRemarcada();
        void clearPalabraRemarcada();
        void filtrarYMinusculas (char *varDato);
        void setForzarTextoRemarcar (char *);
        char *textoForzadoRemarcar;
         int margenI; //Margen de la izquierda
         int margenD; //Margen de la derecha
         int margenF; //Margen del fondo
         int margenS; //Margen superior


     protected:
         int fontNumColor;
         int totalPalabrasPantalla;
         int posMarcaPalabra;
         void charTab(char *dato);
         char * rutaSeleccion;
         int spacTabs;
         bool justificar;
         bool indBarra;
         SDL_Surface *screen;
         SDL_Color *fontColor;
         SDL_Color *bkgColor;
         void drawLinea (char *, int , int ,float ,int );


         int cursorX, cursorY;
         int arrayTamanyos[255];
         int arrayColores[10];
         SDL_Surface* pantallaCirculos;
         bool fondoPintado;
     private:
         char palabraRemarcada[255];
};

#endif // PANTALLA_H
